// <auto-generated />
using FC.Api.Helpers;
using FC.Core.Domain.Common;
using FC.Core.Domain.Items;
using FC.Core.Domain.Users;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FC.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180503092137_AddQtyPerBoxBoxPerPallet")]
    partial class AddQtyPerBoxBoxPerPallet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FC.Core.Domain.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.CategoryChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryParentId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryParentId");

                    b.ToTable("CategoryChildren");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.CategoryGrandChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryChildId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryChildId");

                    b.ToTable("CategoryGrandChildren");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.CategoryParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CategoryParents");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoxPerPallet");

                    b.Property<int?>("CategoryChildId");

                    b.Property<int?>("CategoryGrandChildId");

                    b.Property<int?>("CategoryParentId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("ImageName");

                    b.Property<int?>("ItemAttributeId");

                    b.Property<string>("Name");

                    b.Property<int>("QtyPerBox");

                    b.Property<string>("Remarks");

                    b.Property<decimal?>("SRP");

                    b.Property<int?>("SerialNumber");

                    b.Property<int?>("SizeId");

                    b.Property<string>("Tonality");

                    b.HasKey("Id");

                    b.HasIndex("CategoryChildId");

                    b.HasIndex("CategoryGrandChildId");

                    b.HasIndex("CategoryParentId");

                    b.HasIndex("ItemAttributeId");

                    b.HasIndex("SizeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BreakageStrength");

                    b.Property<int>("CakeLayer");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int>("Feature");

                    b.Property<int>("Material");

                    b.Property<int>("NoOfPattern");

                    b.Property<string>("PrintTech");

                    b.Property<int?>("Purpose1");

                    b.Property<int?>("Purpose2");

                    b.Property<bool?>("Rectified");

                    b.Property<string>("SlipResistance");

                    b.Property<int>("SubType");

                    b.Property<int>("SurfaceFin");

                    b.Property<string>("Thickness");

                    b.Property<int?>("Traffic");

                    b.Property<int>("Type");

                    b.Property<string>("WaterAbs");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("FC.Core.Domain.Sizes.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STClientDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveredQuantity");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<string>("Remarks");

                    b.Property<int?>("STDeliveryId");

                    b.Property<int?>("STOrderDetailId");

                    b.Property<int?>("STSalesDetailId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STDeliveryId");

                    b.ToTable("STClientDeliveries");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STClientReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<string>("ReceivedRemarks");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<string>("Remarks");

                    b.Property<int?>("ReturnReason");

                    b.Property<int?>("STReturnId");

                    b.Property<int?>("STSalesDetailId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STReturnId");

                    b.ToTable("STClientReturns");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<DateTime?>("ApprovedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("ClientName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("DRNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("DeliveryFromStoreId");

                    b.Property<string>("DriverName");

                    b.Property<string>("ORNumber");

                    b.Property<string>("PlateNumber");

                    b.Property<int?>("PreferredTime");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<string>("SINumber");

                    b.Property<int?>("STOrderId");

                    b.Property<int?>("STSalesId");

                    b.Property<int?>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("STOrderId");

                    b.HasIndex("STSalesId");

                    b.HasIndex("StoreId");

                    b.ToTable("STDeliveries");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("date");

                    b.Property<int?>("RequestStatus");

                    b.Property<int?>("StoreId");

                    b.Property<string>("TransactionNo");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("STImports");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STImportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AllowUpdate");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("PhysicalCount");

                    b.Property<int?>("STImportId");

                    b.Property<int?>("SystemCount");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STImportId");

                    b.ToTable("STImportDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("ClientName");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryType");

                    b.Property<string>("ORNumber");

                    b.Property<int?>("OrderToStoreId");

                    b.Property<int?>("OrderType");

                    b.Property<DateTime?>("PODate")
                        .HasColumnType("date");

                    b.Property<string>("PONumber");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<int?>("RequestStatus");

                    b.Property<string>("SINumber");

                    b.Property<int?>("STTransferId");

                    b.Property<int?>("StoreId");

                    b.Property<string>("TransactionNo");

                    b.Property<int?>("TransactionType");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("STOrders");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApprovedQuantity");

                    b.Property<string>("ApprovedRemarks");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateReleased")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<int?>("RequestedQuantity");

                    b.Property<string>("RequestedRemarks");

                    b.Property<int?>("STOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STOrderId");

                    b.ToTable("STOrderDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STPurchaseReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrokenQuantity");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("GoodQuantity");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<string>("Remarks");

                    b.Property<int?>("ReturnReason");

                    b.Property<int?>("STReturnId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STReturnId");

                    b.ToTable("STPurchaseReturns");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("ClientReturnType");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("DriverName");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("date");

                    b.Property<string>("PlateNumber");

                    b.Property<string>("Remarks");

                    b.Property<int?>("RequestStatus");

                    b.Property<string>("ReturnDRNumber");

                    b.Property<string>("ReturnFormNumber");

                    b.Property<int?>("ReturnType");

                    b.Property<int?>("STSalesId");

                    b.Property<int?>("StoreId");

                    b.Property<string>("TransactionNo");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("STReturns");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("ClientName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("DRNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryType");

                    b.Property<string>("ORNumber");

                    b.Property<int?>("OrderToStoreId");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<string>("SINumber");

                    b.Property<int?>("STOrderId");

                    b.Property<string>("SalesAgent");

                    b.Property<DateTime?>("SalesDate")
                        .HasColumnType("date");

                    b.Property<int?>("SalesType");

                    b.Property<int?>("StoreId");

                    b.Property<string>("TransactionNo");

                    b.HasKey("Id");

                    b.HasIndex("STOrderId");

                    b.ToTable("STSales");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STSalesDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("STSalesId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STSalesId");

                    b.ToTable("STSalesDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STShowroomDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveredQuantity");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<string>("Remarks");

                    b.Property<int?>("STDeliveryId");

                    b.Property<int?>("STOrderDetailId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STDeliveryId");

                    b.ToTable("STShowroomDeliveries");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Broken");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("OnHand");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<int?>("STClientDeliveryId");

                    b.Property<int?>("STClientReturnId");

                    b.Property<int?>("STImportDetailId");

                    b.Property<int?>("STOrderDetailId");

                    b.Property<int?>("STSalesDetailId");

                    b.Property<int?>("STShowroomDeliveryId");

                    b.Property<int?>("StoreId");

                    b.Property<int?>("WHDeliveryDetailId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STClientDeliveryId");

                    b.HasIndex("STClientReturnId");

                    b.HasIndex("STImportDetailId");

                    b.HasIndex("STOrderDetailId");

                    b.HasIndex("STSalesDetailId");

                    b.HasIndex("STShowroomDeliveryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("WHDeliveryDetailId");

                    b.ToTable("STStocks");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("StoreId");

                    b.HasKey("Id");

                    b.ToTable("STTransfers");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STTransferDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("STTransferId");

                    b.HasKey("Id");

                    b.HasIndex("STTransferId");

                    b.ToTable("STTransferDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("Assignment");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FullName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("StoreId");

                    b.Property<string>("UserName");

                    b.Property<int?>("UserType");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DRNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DriverName");

                    b.Property<string>("PlateNumber");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("STReturnId");

                    b.Property<int?>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("STReturnId");

                    b.HasIndex("StoreId");

                    b.ToTable("WHDeliveries");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHDeliveryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<int?>("ReceivedBrokenQuantity");

                    b.Property<int?>("ReceivedGoodQuantity");

                    b.Property<string>("ReceivedRemarks");

                    b.Property<int>("ReleaseStatus");

                    b.Property<int?>("STPurchaseReturnId");

                    b.Property<int?>("WHDeliveryId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WHDeliveryId");

                    b.ToTable("WHDeliveryDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("date");

                    b.Property<int?>("RequestStatus");

                    b.Property<string>("TransactionNo");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WHImports");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHImportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AllowUpdate");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("PhysicalCount");

                    b.Property<int?>("SystemCount");

                    b.Property<int?>("WHImportId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WHImportId");

                    b.ToTable("WHImportDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHReceive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DRDate")
                        .HasColumnType("date");

                    b.Property<string>("DRNumber");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime?>("PODate")
                        .HasColumnType("date");

                    b.Property<string>("PONumber");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<string>("TransactionNo");

                    b.Property<int?>("UserId");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WHReceives");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHReceiveDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("Quantity");

                    b.Property<string>("Remarks");

                    b.Property<int?>("WHReceiveId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WHReceiveId");

                    b.ToTable("WHReceiveDetails");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Broken");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateReleased")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int?>("DeliveryStatus");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("OnHand");

                    b.Property<int?>("ReleaseStatus");

                    b.Property<int?>("STClientDeliveryId");

                    b.Property<int?>("STOrderDetailId");

                    b.Property<int?>("STShowroomDeliveryId");

                    b.Property<int?>("TransactionType");

                    b.Property<int?>("WHDeliveryDetailId");

                    b.Property<int?>("WHImportDetailId");

                    b.Property<int?>("WHReceiveDetailId");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("STClientDeliveryId");

                    b.HasIndex("STOrderDetailId");

                    b.HasIndex("STShowroomDeliveryId");

                    b.HasIndex("WHDeliveryDetailId");

                    b.HasIndex("WHImportDetailId");

                    b.HasIndex("WHReceiveDetailId");

                    b.ToTable("WHStocks");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.CategoryChild", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.CategoryParent")
                        .WithMany("Children")
                        .HasForeignKey("CategoryParentId");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.CategoryGrandChild", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.CategoryChild")
                        .WithMany("GrandChildren")
                        .HasForeignKey("CategoryChildId");
                });

            modelBuilder.Entity("FC.Core.Domain.Items.Item", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.CategoryChild", "SubCategory")
                        .WithMany()
                        .HasForeignKey("CategoryChildId");

                    b.HasOne("FC.Core.Domain.Items.CategoryGrandChild", "SubSubCategory")
                        .WithMany()
                        .HasForeignKey("CategoryGrandChildId");

                    b.HasOne("FC.Core.Domain.Items.CategoryParent", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryParentId");

                    b.HasOne("FC.Core.Domain.Items.ItemAttribute", "ItemAttribute")
                        .WithMany()
                        .HasForeignKey("ItemAttributeId");

                    b.HasOne("FC.Core.Domain.Sizes.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STClientDelivery", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STDelivery")
                        .WithMany("ClientDeliveries")
                        .HasForeignKey("STDeliveryId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STClientReturn", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STReturn")
                        .WithMany("ClientPurchasedItems")
                        .HasForeignKey("STReturnId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STDelivery", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.STOrder")
                        .WithMany("Deliveries")
                        .HasForeignKey("STOrderId");

                    b.HasOne("FC.Core.Domain.Stores.STSales")
                        .WithMany("Deliveries")
                        .HasForeignKey("STSalesId");

                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STImport", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STImportDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STImport")
                        .WithMany("Details")
                        .HasForeignKey("STImportId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STOrder", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("FC.Core.Domain.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STOrderDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STOrder")
                        .WithMany("OrderedItems")
                        .HasForeignKey("STOrderId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.Store", b =>
                {
                    b.HasOne("FC.Core.Domain.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("FC.Core.Domain.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STPurchaseReturn", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STReturn")
                        .WithMany("PurchasedItems")
                        .HasForeignKey("STReturnId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STReturn", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("FC.Core.Domain.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STSales", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.STOrder", "Order")
                        .WithMany()
                        .HasForeignKey("STOrderId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STSalesDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STSales")
                        .WithMany("SoldItems")
                        .HasForeignKey("STSalesId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STShowroomDelivery", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STDelivery")
                        .WithMany("ShowroomDeliveries")
                        .HasForeignKey("STDeliveryId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STStock", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STClientDelivery", "STClientDelivery")
                        .WithMany()
                        .HasForeignKey("STClientDeliveryId");

                    b.HasOne("FC.Core.Domain.Stores.STClientReturn", "STClientReturn")
                        .WithMany()
                        .HasForeignKey("STClientReturnId");

                    b.HasOne("FC.Core.Domain.Stores.STImportDetail", "STImportDetail")
                        .WithMany()
                        .HasForeignKey("STImportDetailId");

                    b.HasOne("FC.Core.Domain.Stores.STOrderDetail", "STOrderDetail")
                        .WithMany()
                        .HasForeignKey("STOrderDetailId");

                    b.HasOne("FC.Core.Domain.Stores.STSalesDetail", "STSalesDetail")
                        .WithMany()
                        .HasForeignKey("STSalesDetailId");

                    b.HasOne("FC.Core.Domain.Stores.STShowroomDelivery", "STShowroomDelivery")
                        .WithMany()
                        .HasForeignKey("STShowroomDeliveryId");

                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHDeliveryDetail", "WHDeliveryDetail")
                        .WithMany()
                        .HasForeignKey("WHDeliveryDetailId");
                });

            modelBuilder.Entity("FC.Core.Domain.Stores.STTransferDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.STTransfer")
                        .WithMany("TransferredItems")
                        .HasForeignKey("STTransferId");
                });

            modelBuilder.Entity("FC.Core.Domain.Users.User", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("FC.Core.Domain.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHDelivery", b =>
                {
                    b.HasOne("FC.Core.Domain.Stores.STReturn")
                        .WithMany("Deliveries")
                        .HasForeignKey("STReturnId");

                    b.HasOne("FC.Core.Domain.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHDeliveryDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHDelivery")
                        .WithMany("WarehouseDeliveries")
                        .HasForeignKey("WHDeliveryId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHImport", b =>
                {
                    b.HasOne("FC.Core.Domain.Warehouses.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHImportDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHImport")
                        .WithMany("Details")
                        .HasForeignKey("WHImportId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHReceive", b =>
                {
                    b.HasOne("FC.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHReceiveDetail", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHReceive")
                        .WithMany("ReceivedItems")
                        .HasForeignKey("WHReceiveId");
                });

            modelBuilder.Entity("FC.Core.Domain.Warehouses.WHStock", b =>
                {
                    b.HasOne("FC.Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("FC.Core.Domain.Stores.STClientDelivery", "STClientDelivery")
                        .WithMany()
                        .HasForeignKey("STClientDeliveryId");

                    b.HasOne("FC.Core.Domain.Stores.STOrderDetail", "STOrderDetail")
                        .WithMany()
                        .HasForeignKey("STOrderDetailId");

                    b.HasOne("FC.Core.Domain.Stores.STShowroomDelivery", "STShowroomDelivery")
                        .WithMany()
                        .HasForeignKey("STShowroomDeliveryId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHDeliveryDetail", "WHDeliveryDetail")
                        .WithMany()
                        .HasForeignKey("WHDeliveryDetailId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHImportDetail", "WHImportDetail")
                        .WithMany()
                        .HasForeignKey("WHImportDetailId");

                    b.HasOne("FC.Core.Domain.Warehouses.WHReceiveDetail", "WHReceiveDetail")
                        .WithMany()
                        .HasForeignKey("WHReceiveDetailId");
                });
#pragma warning restore 612, 618
        }
    }
}
